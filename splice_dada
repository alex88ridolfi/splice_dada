#!/usr/bin/env python

#################### ALESSANDRO RIDOLFI ########################
#                       Version 1.0.2                          #
#                 Cagliari, June-July 2019                     #
################################################################


import sys, os, os.path, glob, time, datetime
import numpy as np

np.set_printoptions(threshold=sys.maxsize)


class DADA_file(object):
        def __init__(self, file_name):
                self.file_abspath = os.path.abspath(file_name)
                self.file_nameonly = self.file_abspath.split("/")[-1]
                self.file_basename, self.file_extension = os.path.splitext(self.file_nameonly)
                self.dict_properties = self.read_DADA_header(self.file_abspath)

                self.header                   = self.dict_properties['HEADER']
                self.hdr_version              = np.float(self.dict_properties['HDR_VERSION'])
                self.hdr_size                 = int(self.dict_properties['HDR_SIZE'])
                self.dada_version             = np.float(self.dict_properties['DADA_VERSION'])
                self.pic_version              = np.float(self.dict_properties['PIC_VERSION'])
                self.obs_id                   = self.dict_properties['OBS_ID']
                self.primary                  = self.dict_properties['PRIMARY']
                self.secondary                = self.dict_properties['SECONDARY']
                self.file_name                = self.dict_properties['FILE_NAME']
                self.file_size                = int(self.dict_properties['FILE_SIZE'])
                self.file_number              = int(self.dict_properties['FILE_NUMBER'])
                self.utc_start                = self.dict_properties['UTC_START']
                self.mjd_start                = np.float64(self.dict_properties['MJD_START'])
                self.obs_offset               = int(self.dict_properties['OBS_OFFSET'])
                self.obs_overlap              = int(self.dict_properties['OBS_OVERLAP'])
                self.source_name              = self.dict_properties['SOURCE']
                self.ra                       = self.dict_properties['RA']
                self.dec                      = self.dict_properties['DEC']
                self.telescope                = self.dict_properties['TELESCOPE']
                self.instrument               = self.dict_properties['INSTRUMENT']
                self.freq_MHz                 = np.float(self.dict_properties['FREQ'])
                self.bw_MHz                   = np.float(self.dict_properties['BW'])
                self.t_samp_us                = np.float(self.dict_properties['TSAMP'])
                self.nbit                     = int(self.dict_properties['NBIT'])
                self.ndim                     = int(self.dict_properties['NDIM'])
                self.npol                     = int(self.dict_properties['NPOL'])
                self.nchan                    = int(self.dict_properties['NCHAN'])
                self.resolution               = int(self.dict_properties['RESOLUTION'])
                self.dsb                      = int(self.dict_properties['DSB'])
                
                
                
        def read_DADA_header(self, filename):
                dada_file = open(filename, "r")
                dada_file_header = dada_file.read(4096).split("# end of header")[0]
                list_header_lines = dada_file_header.split("\n")

                
                dict_properties = {}
                for line in list_header_lines:
                        if line != "" and (not line.startswith("#")):
                                key, value = line.split()[:2]
                                dict_properties[key.strip()] = value.strip()
                dada_file.close()

                return dict_properties

def make_DADA_header(outfilename, dict_params):
        outfile = open(outfilename, "w")

        outfile.write("HEADER       %s                # Distributed aquisition and data analysis\n" % dict_params['HEADER'])
        outfile.write("HDR_VERSION  %.1f                 # Version of this ASCII header\n" % np.float(dict_params['HDR_VERSION']))
        outfile.write("HDR_SIZE     %s                # Size of the header in bytes\n" % dict_params['HDR_SIZE'])
        outfile.write("\n")
        outfile.write("DADA_VERSION %.1f                 # Version of the DADA Software\n" % np.float(dict_params['DADA_VERSION']))
        outfile.write("PIC_VERSION  %.1f                 # Version of the PIC FPGA Software\n" % np.float(dict_params['PIC_VERSION']))
        outfile.write("\n")
        outfile.write("# DADA parameters\n")
        outfile.write("OBS_ID       %s               # observation ID\n" % dict_params['OBS_ID'])
        outfile.write("PRIMARY      %s               # primary node host name\n" % dict_params['PRIMARY'])
        outfile.write("SECONDARY    %s               # secondary node host name\n" % dict_params['SECONDARY'])
        outfile.write("FILE_NAME    %s               # full path of the data file\n" % dict_params['FILE_NAME'])
        outfile.write("\n")
        outfile.write("FILE_SIZE    %d              # requested size of data files\n" % int(dict_params['FILE_SIZE']))
        outfile.write("FILE_NUMBER  %d                      # number of data file\n" % int(dict_params['FILE_NUMBER']))
        outfile.write("\n")
        outfile.write("# time of the rising edge of the first time sample\n")
        outfile.write("UTC_START    %s    # yyyy-mm-dd-hh:mm:ss.fs\n" % dict_params['UTC_START'])
        outfile.write("MJD_START    %.29f   # MJD equivalent to the start UTC\n" % np.float64(dict_params['MJD_START']))
        outfile.write("\n")
        outfile.write("OBS_OFFSET   %d             # bytes offset from the start MJD/UTC\n" % int(dict_params['OBS_OFFSET']))
        outfile.write("OBS_OVERLAP  %d                   # bytes by which neighbouring files overlap\n" % int(dict_params['OBS_OVERLAP']))
        outfile.write("\n")
        outfile.write("# description of the source\n")
        outfile.write("SOURCE       %s          # name of the astronomical source\n" % dict_params['SOURCE'])
        outfile.write("RA           %s           # Right Ascension of the source\n" % dict_params['RA'])
        outfile.write("DEC          %s          # Declination of the source\n" % dict_params['DEC'])
        outfile.write("\n")
        outfile.write("# description of the instrument\n")
        outfile.write("TELESCOPE    %s                 # telescope name\n" % dict_params['TELESCOPE'])
        outfile.write("INSTRUMENT   %s               # instrument name\n" % dict_params['INSTRUMENT'])
        outfile.write("FREQ         %.3f            # centre frequency in MHz\n" % np.float(dict_params['FREQ']))
        outfile.write("BW           %.3f           # bandwidth of in MHz (-ve lower sb\n" % np.float(dict_params['BW']))
        outfile.write("TSAMP        %.6f            # sampling interval in microseconds\n" % np.float(dict_params['TSAMP']))
        outfile.write("\n")
        outfile.write("NBIT         %d                   # number of bits per sample\n" % int(dict_params['NBIT']))
        outfile.write("NDIM         %d                   # dimension of samples (2=complex, 1=real)\n" % int(dict_params['NDIM']))
        outfile.write("NPOL         %d                   # number of polarizations observed\n" % int(dict_params['NPOL']))
        outfile.write("NCHAN        %d                   # number of channels here\n" % int(dict_params['NCHAN']))
        outfile.write("RESOLUTION   %d	     		 # a parameter that is unclear\n" % int(dict_params['RESOLUTION']))
        outfile.write("DSB          %d\n" % int(dict_params['DSB']))
        outfile.write("# end of header\n")
        outfile.close()

        
def check_continuity_of_subbands(list_subbands_float):
        bw_spacing_MHz = list_subbands_float[1] - list_subbands_float[0]
        
        for k in range(1, len(list_subbands_float)):
                if not (list_subbands_float[k] - list_subbands_float[k-1]) == bw_spacing_MHz:
                        bw_spacing_MHz = 0
                
        return bw_spacing_MHz


def log_error(string_error, log_filename):
        log_file = open("%s" % (log_filename), 'w')
        log_file.write("****************************************************************\n")
        log_file.write("%s\n\n" % (string_error))
        log_file.write("****************************************************************\n\n")
        log_file.flush()
        log_file.close()


       
#DEFAULT PARAMETERS
string_version = "1.0.2 (22Jul2019)"
subbands_spacing_MHz = 0
outfile_basename = "spliced_"
verbosity_level = 1
blocksize_bytes = 100000000
flag_custom_blocksize = 0
flag_errors_occurred = 0

#SHELL ARGUMENT
if (len(sys.argv) == 1 or ("-h" in sys.argv) or ("-help" in sys.argv) or ("--help" in sys.argv)):
        print "USAGE: %s -dadafiles <files.dada> [-o outfile_basename] [{-Q | -v | -V}] [-blocksize 200MB]" % (os.path.basename(sys.argv[0]))
        print
        print "%10s  %-36s:  %-50s" % ("-h", "", "Print help")
        print "%10s  %-36s:  %-50s %s" % ("-dadafiles", "\"*.dada\"", "Input DADA baseband files (.dada)", "")
        print "%10s  %-36s:  %-50s" % ("-o", "\"basename\" [Default: \"spliced_<original_name>\"]", "Specify output file basename")
        print "%10s  %-36s:  %-50s" % ("-blocksize", "N_bytes [Default: \"100MB\"]", "Specify the size of each block to process at each iteration")
        print "%10s  %-36s:  %-50s" % ("-Q", "", "Quiet mode - do not print anything")
        print "%10s  %-36s:  %-50s" % ("-v", "", "Verbose mode - print more useful info about the processing")
        print "%10s  %-36s:  %-50s" % ("-V", "", "Very verbose mode - print everything to debug issues")
        print "%10s  %-36s:  %-50s" % ("-version", "", "Print code version")
        print
        exit()
elif (("-version" in sys.argv) or ("--version" in sys.argv)):
        print "Version: %s" % (string_version)
        exit()
else:
        for j in range(1, len(sys.argv)):
                if (sys.argv[j] == "-dadafiles"):
                        string_files = sys.argv[j+1]
                        if ("*" in string_files) or ("?" in string_files):
                                list_files = sorted(glob.glob(string_files.strip("\"")))
                        else:
                                list_files = string_files.replace(" ","").split(",")
                        N_datfiles = len(list_files)
                        
                elif (sys.argv[j] == "-blocksize"):
                        blocksize_string = sys.argv[j+1]
                        if not blocksize_string[-1] in [0,1,2,3,4,5,6,7,8,9]:
                                if blocksize_string.endswith("M"):
                                        blocksize_bytes = int(blocksize_string.replace("M", "")) * 1000000
                                elif blocksize_string.endswith("MB"):
                                        blocksize_bytes = int(blocksize_string.replace("MB", "")) * 1000000
                                elif blocksize_string.endswith("G"):
                                        blocksize_bytes = int(blocksize_string.replace("G", "")) * 1000000000
                                elif blocksize_string.endswith("GB"):
                                        blocksize_bytes = int(blocksize_string.replace("GB", "")) * 1000000000
                                else:
                                        print "ERROR: Not a recognized block size unit! Valid units are: KB, MB, GB (or, if you are lazy: K, M, G)." % ()
                                        exit()
                        else:
                                blocksize_bytes = int(blocksize_string)

                        if blocksize_bytes < 10000000:
                                print "ERROR: Block size must be at least 10 MB!" % ()
                                exit()
                        
                        flag_custom_blocksize = 1
                elif (sys.argv[j] == "-o"):
                        outfile_basename = sys.argv[j+1]
                elif (sys.argv[j] == "-Q"):
                        verbosity_level = 0
                elif (sys.argv[j] == "-v"):
                        verbosity_level = 2
                elif (sys.argv[j] == "-V"):
                        verbosity_level = 3
                

log_filename = "LOG-errors_splice_dada_%s.txt" % (datetime.datetime.now()).strftime("%Y%m%d_%H%M")

dict_dadafiles = {}

for n in range(N_datfiles):
        current_dada_filename = list_files[n]
        dict_dadafiles[current_dada_filename] = DADA_file(current_dada_filename)

if verbosity_level >= 1:
        print
        print "#"*62
        print "#" + " "*24 + "SPLICE_DADA" + " "*25 + "#"
        print "#" + " "*21 + "%s" % (string_version) + " "*22 + "#"
	print "#"*62
        print
        print "================================"
        print
        print "Input DADA files:"
        for n in range(N_datfiles):
                print "%3d/%d: %s" % (n+1, N_datfiles, list_files[n])

        
if (blocksize_bytes%4 > 0):
        blocksize_bytes = blocksize_bytes - (blocksize_bytes % 4)
        if verbosity_level >= 1:
                print "WARNING: the block size in bytes must be a multiple of 4! Rounding down to %d..." % (blocksize_bytes)


        
                
list_subbands_str = []
list_subbands_float = []

for f in dict_dadafiles.keys():
        current_freq = dict_dadafiles[f].freq_MHz
        if not current_freq in list_subbands_float:
                list_subbands_float.append(current_freq)

list_subbands_float = sorted( list_subbands_float, reverse=False)
list_subbands_str = ["%.2f" % x for x in list_subbands_float]


if verbosity_level >= 2:
        print "List subbands_str = %s" % (list_subbands_str)
        print "List subbands_float = %s" % (list_subbands_float)



if verbosity_level >= 1:
        print
        print "Checking that central frequencies of subbands are all equally spaced...",; sys.stdout.flush()
        
subbands_spacing_MHz = check_continuity_of_subbands(list_subbands_float)

if subbands_spacing_MHz != 0:
        if verbosity_level >= 1:
                print "all good!"
                print "Central frequencies of subbands %s equally spaced by %.2f MHz!"  % (list_subbands_float, subbands_spacing_MHz)
else:
        print
        print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        print "ERROR!"
        print "Central frequencies of subbands %s are not equally spaced!" % (list_subbands_float)
        print 
        print "Central freq of subband %d: %.2f MHz" % (0, list_subbands_float[0])
        for i in range(1, len(list_subbands_float)):
                print "Central freq of subband %d: %.2f MHz  --> diff: %.2f MHz" % (i, list_subbands_float[i], list_subbands_float[i]-list_subbands_float[i-1])
        print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        exit()


dict_subbands = {}
for freq in list_subbands_str:
        dict_subbands[freq] = []

for f in dict_dadafiles.keys():
        str_freq = '%.2f' % dict_dadafiles[f].freq_MHz
        dict_subbands[str_freq].append(f)

for key in dict_subbands.keys():
        dict_subbands[key].sort()

N_subbands = len(list_subbands_str)



##################################################################
# CHECK NUMBER OF FILES IN EACH SUBBAND
##################################################################
if verbosity_level >= 1:
        print
        print "Checking that all subbands have the same number of files...", ; sys.stdout.flush()
Nfiles_per_subband = len(dict_subbands[list_subbands_str[0]])
for n in range(N_subbands):
        nfiles_current_subband = len(dict_subbands[list_subbands_str[n]])
        if verbosity_level >= 2:
                print
                print
                print "Subband %2d/%d (%.2f MHz) ---> %3d files" % (n+1, N_subbands, list_subbands_float[n], nfiles_current_subband)

        if nfiles_current_subband != Nfiles_per_subband:
                print "WARNING! Number of files is not the same in each subband! Logging the error onto LOG-file '%s'" % (log_filename)        
        
if verbosity_level >= 1:
        print "all good!"
        print "%d files in each subband. " % (Nfiles_per_subband)
        print



        
##################################################################
# CALCULATE SOME NEW PARAMETERS FOR HEADER OF OUTPUT FILE
##################################################################
freq_new_MHz = np.average(list_subbands_float)


if verbosity_level >= 1:
        if flag_custom_blocksize == 0:
                print "Block size not specified. Using default value of 100 MB per subband."
                print
        else:
                print "Using custom block size of %.2f MB per subband." % (blocksize_bytes/1.0e6)
                print


                
##################################################################
# LOOP OVER THE FILES, JOIN THE SUBBANDS
##################################################################

for n_file in range(Nfiles_per_subband):
        time_start = time.time()
        flag_splice_file = 1
        list_files_to_join = []
        if verbosity_level >= 2:
                print
                print "Dividing files according to which subband they belong...", ; sys.stdout.flush()

        for j_subband in range(N_subbands):
                subband_key = "%.2f" % (list_subbands_float[j_subband])
                if verbosity_level >= 2:
                        print "Subint %d / band %s --> Adding %s" % (n_file, subband_key, dict_subbands[subband_key][n_file])
                list_files_to_join.append(dict_subbands[subband_key][n_file])
        if verbosity_level >= 2:
                print "done!"
                print

        # Import all dada files and put them into a list
        list_dada_files_to_join = [ DADA_file(f) for f in list_files_to_join]

        if outfile_basename != "spliced_":
                outfile_name = "%s_subint_%04d.dada" % (outfile_basename, n_file)
        else:
                outfile_name = "spliced_%s" % (os.path.basename(list_files_to_join[0]))
                
        if verbosity_level >= 2:
                print "Joining file %3d/%d \"%s\"..." % (n_file+1, Nfiles_per_subband, outfile_name), ; sys.stdout.flush()



        ################################################
        # Check that MJD is the same for all the files
        ################################################
        if verbosity_level >= 2:
                print
                print "Checking that all files have the same start MJD...", ; sys.stdout.flush()

        MJD_start_subint = list_dada_files_to_join[0].mjd_start
        for n in range(N_subbands):
                if verbosity_level >= 3:
                        print "%s --> MJD_START = %.29f" % (list_files_to_join[n], list_dada_files_to_join[n].mjd_start)
                if list_dada_files_to_join[n].mjd_start != MJD_start_subint:
                        string_error = "*** ERROR on file '%s' ****: \nMJD = %.29f != %.29f" % (list_dada_files_to_join[n].file_nameonly, list_dada_files_to_join[n].mjd_start, MJD_start_subint)
                        datetime_now = (datetime.datetime.now()).strftime("%Y/%m/%d  %H:%M")
                        print
                        print "%s: %s" % (datetime_now, string_error)
                        print "Skipping file and logging the error...\n"
                        log_error(string_error, log_filename)
                        flag_errors_occurred = 1
                        flag_splice_file = 0

        if verbosity_level >= 2:
                print "all good!"
                print "All files have MJD_START = %.29f" % (MJD_start_subint)



        ################################################
        # Check that FILE_SIZE is the same for all the files
        ################################################
        if verbosity_level >= 2:
                print
                print "Checking that all files have the same nominal file size...", ; sys.stdout.flush()

        file_size_subint = list_dada_files_to_join[0].file_size
        for n in range(N_subbands):
                if verbosity_level >= 3:
                        print "%s --> FILE_SIZE = %d" % (list_files_to_join[n], list_dada_files_to_join[n].file_size)
                if list_dada_files_to_join[n].file_size != file_size_subint:
                        string_error = "*** ERROR on file '%s' ****: \nFILE_SIZE = %d != %d" % (list_dada_files_to_join[n].file_nameonly, list_dada_files_to_join[n].file_size, file_size_subint)
                        datetime_now = (datetime.datetime.now()).strftime("%Y/%m/%d  %H:%M")
                        print
	                print "%s: %s" % (datetime_now, string_error)
                        print "Skipping file and logging the error...\n"
                        log_error(string_error, log_filename)
                        flag_errors_occurred = 1
	                flag_splice_file = 0



        if verbosity_level >= 2:
                print "all good!"
                print "All files have FILE_SIZE = %d bytes" % (file_size_subint)
                
        ################################################
        # Check that OBS_OFFSET is the same for all the files
        ################################################
        if verbosity_level >= 2:
                print
                print "Checking that all files have the same OBS_OFFSET...", ; sys.stdout.flush()
        obs_offset_subint = list_dada_files_to_join[0].obs_offset
        for n in range(N_subbands):
                if verbosity_level >= 3:
                        print "%s --> OBS_OFFSET = %d" % (list_files_to_join[n], list_dada_files_to_join[n].obs_offset)
                if list_dada_files_to_join[n].obs_offset != obs_offset_subint:
                        print "ERROR! OBS_OFFSET = %d != %d" % (list_dada_files_to_join[n].obs_offset, obs_offset_subint)
                        string_error = "*** ERROR on file '%s' ****: \nOBS_OFFSET = %d != %d" % (list_dada_files_to_join[n].file_nameonly, list_dada_files_to_join[n].obs_offset, obs_offset_subint)
                        datetime_now = (datetime.datetime.now()).strftime("%Y/%m/%d  %H:%M")
                        print
                        print "%s: %s" % (datetime_now, string_error)
                        print "Skipping file and logging the error...\n"
                        log_error(string_error, log_filename)
                        flag_errors_occurred = 1
                        flag_splice_file = 0


                        
        if verbosity_level >= 2:
                print "all good!"
                print "All files have OBS_OFFSET = %d" % (obs_offset_subint)

        
        ################################################
        # Check that BW is the same for all the files
        ################################################
        if verbosity_level >= 2:
                print
                print "Checking that all files have the same bandwidth...", ; sys.stdout.flush()
        bw_MHz_subint = list_dada_files_to_join[0].bw_MHz
        for n in range(N_subbands):
                if verbosity_level >= 3:
                        print "%s --> BW = %.3f MHz" % (list_files_to_join[n], list_dada_files_to_join[n].bw_MHz)
                if list_dada_files_to_join[n].bw_MHz != bw_MHz_subint:
                        print "ERROR! BW = %.3f != %.3f" % (list_dada_files_to_join[n].bw_MHz, bw_MHz_subint)
                        string_error = "*** ERROR on file '%s' ****: \nBW = %.3f != %.3f" % (list_dada_files_to_join[n].file_nameonly, list_dada_files_to_join[n].bw_MHz, bw_MHz_subint)
                        datetime_now = (datetime.datetime.now()).strftime("%Y/%m/%d  %H:%M")
                        print
                        print "%s: %s" % (datetime_now, string_error)
                        print "Skipping file and logging the error...\n"
                        log_error(string_error, log_filename)
                        flag_errors_occurred = 1
                        flag_splice_file = 0


        if verbosity_level >= 2:
                print "all good!"
                print "All files have BW = %.2f MHz" % (bw_MHz_subint)



        if flag_splice_file == 1:
                ################################################
                # CREATE NEW HEADER
                ################################################

                if verbosity_level >= 2:
                        print
                        print "Creating header for output file '%s'..." % (outfile_name), ; sys.stdout.flush()

                new_file_size = file_size_subint * N_subbands
                new_obs_offset = obs_offset_subint * N_subbands
                new_bw_MHz = bw_MHz_subint * N_subbands
                dict_header_outfile = list_dada_files_to_join[0].dict_properties
                dict_header_outfile['FREQ'] = "%.3f" % freq_new_MHz
                dict_header_outfile['BW'] = "%.2f" % new_bw_MHz
                dict_header_outfile['NCHAN'] = "%d" % N_subbands
                dict_header_outfile['FILE_SIZE'] = "%d" % new_file_size
                dict_header_outfile['OBS_OFFSET'] = "%d" % new_obs_offset

                make_DADA_header(outfile_name, dict_header_outfile)
                header_size_bytes = os.path.getsize(outfile_name)
                null_bytes_to_write = 4096 - header_size_bytes
        
                if verbosity_level >= 3:
                        print
                        print
                        print "New FREQ:        %.3f MHz" % (freq_new_MHz)
                        print "New NCHAN:       %d" % (N_subbands)
                        print "New BW:       %d" % (new_bw_MHz)
                        print "New FILE_SIZE:   %d" % (new_file_size)
                        print "New OBS_OFFSET:  %d" % (new_obs_offset)
                        print
                        print "Size of '%s': %d bytes" % (outfile_name, header_size_bytes)
                        print "Will fill %d bytes with zeros..." % (null_bytes_to_write)
                        print "size(np.zeros(null_bytes_to_write).size) = ", np.zeros(null_bytes_to_write).size


                
                outfile = open(outfile_name, 'ab')
                array_to_write = np.zeros(null_bytes_to_write, dtype=np.uint8) 
                outfile.write(bytearray(array_to_write))
                outfile.close()
                if verbosity_level >= 2:
                        print "done!"
        
                ######################################################
                # JOIN THE FILES
                # i = time sample                 (0, N_time_samples)
                # j = subband                     (0, N_subbands-1)
                # k = amplitude/phase pol0/pol1   (0,1,2,3)
                ######################################################


                if verbosity_level >= 2:
                        print "Joining the subbands and writing out file '%s'...\n" % (outfile_name), ; sys.stdout.flush() 
        
                array_buffer = np.array([], dtype=np.uint8)

                N_time_samples = file_size_subint / 4
        
                
                if verbosity_level >= 3:
                        print "N_time_samples = ", N_time_samples
                        
                if blocksize_bytes > file_size_subint:
                        if verbosity_level >= 1:
                                print "WARNING: selected block size is larger than the actual input file size! Setting the block size = file size..."
                                print
                        blocksize_bytes = file_size_subint                
                        N_time_samples_block = N_time_samples
                else: 
                        N_time_samples_block = blocksize_bytes / 4
                
                N_blocks_to_read = int( N_time_samples / N_time_samples_block )  # +1 last block, done separately

                last_bytes = file_size_subint % blocksize_bytes
        
                #print
                #print "N_time_samples       = %d " % (N_time_samples)
                #print "N_time_samples_block = %d " % (N_time_samples_block)
                #print "N_blocks_to_read = %d " % (N_blocks_to_read)


                # Open the files to join and read N_time_samples_block in each, after skipping the 4096 bytes of the header 
                list_open_files = []

        
                outfile = open(outfile_name, 'ab')
                for i in range(N_blocks_to_read):
                        list_array_read_blocks = []
                        if verbosity_level == 1:
		                sys.stdout.write('\rJoining file %3d/%d \"%s\" (processing block %d/%d)...' % (n_file+1, Nfiles_per_subband, outfile_name, i+1, N_blocks_to_read)), ; sys.stdout.flush()
                                sys.stdout.flush()


                        if verbosity_level >= 2:
                                print "Reading block %3d/%d (%d bytes)..." % (i+1, N_blocks_to_read, blocksize_bytes)
                        
                        
                        for j in range(N_subbands):
                                #print "Reading %s..." % (list_files_to_join[j])
                                list_open_files.append( open(list_files_to_join[j], 'r') )
                                list_array_read_blocks.append([])
                
                        for j in range(N_subbands):
                                if i==0:
                                        list_open_files[j].seek(4096) #Skip the header
                                else:
                                        list_open_files[j].seek(4096 + i*blocksize_bytes)

                        for j in range(N_subbands):
                                list_array_read_blocks[j] = np.fromfile(list_open_files[j], dtype="uint8", count=4*N_time_samples_block).reshape(N_time_samples_block, 4)

                        if verbosity_level >= 3:
                                for j in range(N_subbands):
                                        print "list_array_read_blocks[BAND=%d=%s MHz] = %d elements = %d bytes = %d MB" % (j, list_subbands_str[j], len(list_array_read_blocks[j]), list_array_read_blocks[j].size, list_array_read_blocks[j].size/1000000)
                
                        array_buffer = np.concatenate(list_array_read_blocks, axis=1)
                        outfile.write(bytearray(array_buffer))
                        
                ############################################
                # LEFT-OVER BYTES
                ############################################
                if last_bytes > 0:
                        list_array_read_blocks = []
                        N_time_samples_last_bytes = last_bytes / 4
                        if verbosity_level == 1:
		                sys.stdout.write('\rJoining file %3d/%d \"%s\" (processing last bytes)...' % (n_file+1, Nfiles_per_subband, outfile_name)), ; sys.stdout.flush()
                                sys.stdout.flush()

                        if verbosity_level >= 2:
                                print "Reading last %d bytes..." % (last_bytes)
                        
                        for j in range(N_subbands):
                                if verbosity_level >= 2:
                                        print "Reading %s..." % (list_files_to_join[j])
                                list_open_files.append( open(list_files_to_join[j], 'r') )
                                list_array_read_blocks.append([])
                
                        for j in range(N_subbands):
                                list_open_files[j].seek(4096 + N_blocks_to_read*blocksize_bytes)

                        for j in range(N_subbands):
                                list_array_read_blocks[j] = np.fromfile(list_open_files[j], dtype="uint8", count=4*N_time_samples_last_bytes).reshape(N_time_samples_last_bytes, 4)

                        if verbosity_level >= 3:
                                for j in range(N_subbands):
                                        print "list_array_read_blocks[BAND=%d=%s MHz] = %d elements = %d bytes = %d MB" % (j, list_subbands_str[j], len(list_array_read_blocks[j]), list_array_read_blocks[j].size, list_array_read_blocks[j].size/1000000)
                                        
                        array_buffer = np.concatenate(list_array_read_blocks, axis=1)
                        outfile.write(bytearray(array_buffer))

        

                
                outfile.close()
                time_end = time.time()
                time_taken_s = time_end - time_start 
                if verbosity_level >= 1:
                        current_runtime = time.time() - time_start
                        files_per_second = (n_file+1) / current_runtime
		        if current_runtime > 0 and n > 0:
                                ETA_s = (Nfiles_per_subband - (n_file+1))/files_per_second
                                ETA_min = ETA_s/60.
                        else:
                                ETA_min = np.nan

                        print "done in %.2f seconds! (ETA: %.2f min)" % (time_taken_s, ETA_min)


if flag_errors_occurred == 1:
        print
        print "***************"
        print "WARNING: some errors occurred when combining some of the files. Check the log file '%s' for details." % (log_filename)
